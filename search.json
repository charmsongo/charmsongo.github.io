[{"title":"Map简单记录","url":"/2019/07/16/Map简单记录/","content":"\n# Map 笔记\n\n今天学习了 map 中的 hashMap 和 concurrentHashMap 区别，简单记录下。\n\n## 1.JDk1.7\n**hashmap：**\n\n 1. hashmap 是数组和链表的组合结构，线程不安全\n 2. hashmap 默认长度为 16，默认加载因子为 0.75，hashmap 添加数据时，添加后的长度大于等于原来长度*加载因子时会扩容，默认增加为原来的 2 倍\n 3. hashmap 指定长度和加载因子初始化构造方法时，hashmap 的长度初始化为大于等于指定长度的 2 的次方的值\n 4. hashmap 的长度总是为 2 的次方，主要是为了方便通过寻找到 entry 对象存在那个数组节点。\n 5. put() 方法操作时，先通过 hashcode 位运算和与运算后得到 hash，再通过 hash & (hashmap长度-1) 寻找到entry对象存在那个数组节点，然后得到这个节点存放的链表，如果为 null，直接存放，如果不为 null,则通过 key 判断是否有自己存放的 key 的  entry，有直接替换 value，返回 oldvalue，如果没有判断链表长度，最后放在链表头部，然后存放链表原来头部 entry 的下标 next，链表下移\n 6. 扩容时，数组元素中链表的顺序和原来存放的顺序刚好相反，并且会出现死循环的问题\n\n   **hashtable**：线程安全，给 put() 方法加了个 synchronized，效率慢 \n   **concurrentHashMap：**    构造方法中比 hashmap 多个级别level的参数，该 map 把一个entry数组分为了 level 个，segment，并且每个都加锁，每个 segment 的长度为 map 的长度/level\n\n## 2.JDK1.8\n\n **hashmap：**\n相对于 jdk1.7 的区别：\n 1. put() 方法插入元素，追加在链表的尾部，而不是插入头部再向下移动一位\n 2. 链表长度大于等于8时会树化为红黑树结构\n\n**concurrentHashMap：**\n相对于 jdk1.7 的区别：没有了 segment。因为每次操作都会设计链表的第一个元素，所以只给链表第一位元素加锁\n\n\n> 如果有哪些不对的地方烦请指认，先行感谢","tags":["JDK","JAVA","MAP"]},{"title":"MYSQL学习笔记one","url":"/2019/07/07/MYSQL学习笔记one/","content":"\n\n\n# MYSQL 笔记\n\n好久没写博客了，感觉时间过的好快，虽然没更文，但是自己没有放弃记录输出，这次记录下学习 MySQL 的一些知识。\n\n## 1.MYSQL 中 NULL 和空值区别\n\n 1. 空值长度为 0，null 没有长度，显示 null\n 2. 函数 count 默认把列中 null 行去掉，空值会计算，函数 ifnull(parm1,parm2) 意为当 parm1 为 null 值时，结果为 parm2，不为null 时，结果为 parm1\n 3. MYSQL 中，普通索引和复合索引有值为 null 时是走索引的，资料上说**空间索引**不走\n 4. explain 可以查看语句执行详情\n 5. show keys(indexes) from table 查看表索引\n 6. 全部插入 null 会报错\n-- 1048 - Column 'one' cannot be null\n 7. 添加索引\n-- ALTER TABLE table_name ADD INDEX index_name(col_name);\n--ALTER TABLE tb_test ADD INDEX index_oat (one, two);\n--ALTER TABLE tb_test add INDEX index_two(two);\n\n\n## 2.MYSQL触发器\n\n 1. 显示库触发器 show triggers;\n**SHOW TRIGGERS [FROM schema_name];**\n其中可选参数 schema_name 即 Schema 的名称，在 MySQL 中 Schema 和 Database 相关，查看时可以指定数据库名。指定后会从指定的数据库查询，不定则从 USE database_name;切换的，当前工作数据库查询。\n 2. 创建触发器\n**CREATE TRIGGER <触发器名称>\n{ BEFORE | AFTER }\n{ INSERT | UPDATE | DELETE } \nON <表名称>\nFOR EACH ROW\n<触发的SQL语句>**\n触发器名称 -- 触发器名字，最多 64 个字符，其命令规则和 MySQL 中其他对象的命名方式类似\n{ BEFORE | AFTER } -- 触发器执行时间：可以设置为事件发生前或后\n{ INSERT | UPDATE | DELETE } -- 触发事件：可以设置为在执行 INSERT、UPDATE、DELETE 操作时触发\n表名称 -- 触发器所属表：触发器属于某一个表，当在这个表上执行 INSERT、UPDATE、DELETE 操作的时就会使触发器触发，一张表的同一个事件只能有一个触发器\nFOR EACH ROW -- 触发器的执行间隔：FOR EACH ROW 子句通知触发器，每行执行一次动作\n触发的 SQL 语句 -- 事件触发时所要执行的SQL语句。\n例:\nmysql> DELIMITER $   //将SQL语句的结束符设置为#\nmysql> CREATE TRIGGER t_after_insert_userRoles\nAFTER INSERT ON\nuserRoles\nFOR EACH ROW\nBEGIN\n    update users set isManager = 1 where userId = new.userId and new.roleId = 1;\nEND$\nmysql> DELIMITER ;   //将 SQL 语句的结束符设重置为;以不影响后续使用\n 3. 删除触发器\n**DROP TRIGGER [IF EXISTS] [schema_name.]trigger_name;**\n\n\n## 3.MYSQL 数据库的事务\n\n **特性:**\n 1. 原子性（Atomicity）*事务中的程序对数据库的修改操作要么全部成功，要么全部失败*\n 2. 一致性（Consistency）*事务执行前和执行后数据的来源和去向保持平衡*\n 3. 隔离性（Isolation）*并发时每个事务相互不影响，互相隔离*\n 4. 持久性（Durubility）*事务一旦提交成功，应保证数据的完整存在*\n\n  **隔离级别:**\nA.读取未提交\nB.读取已提交\nC.可重复读(mysql默认级别)\nD.可串行化(会导致大量超时现象和锁竞争)\n\noracle数据库支持两种B和D，默认为B\n\n\n\n## 4.MYSQL 数据库 SQL 优化\n\n 1. explain+sql查看语句执行计划，type是sql语句查询的类型all是没有走索引，ref、eq_ref是走索引，type为index_merge，extra有intersect是并集索引\n 2. create index 名字_index on table(加索引字段,…)，建单个或者联合索引\n 3. show warnings;是查询优化后的语句\n 4. 查询的结果集为个别时，where后的条件都加索引\n 5. 多表连接的字段上需要建立索引\n 6. where条件字段上需要建立索引\n 7. 排序字段上需要建立索引\n 8. 分组字段上需要建立索引\n 9. Where条件上不要使用运算函数，以免索引失效\n 10. 多列索引还有最左前缀的特性，即索引的第一个字段sex要出现在where条件中\n 11. 当where后的条件联合起来查询结果区分度高时推荐使用联合索引\n\n>  MYSQ逻辑处理步骤如下图\n\n![在这里插入图片描述](MYSQL学习笔记one\\1.png)\n","tags":["MYSQL","触发器"]},{"title":"Hello World","url":"/2019/06/23/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n"},{"title":"springboot登陆页面图片验证码简单的web项目","url":"/2019/04/02/springboot登陆页面图片验证码简单的web项目/","content":"\n# 写在前面\n前段时间大家都说最近大环境不好，好多公司在裁员，换工作的话不推荐轻易的裸辞，但是我想说的是我所在的公司好流弊，有做不完的业务需求，还有就是招不完的人......\n最近我也是比较繁忙，但是还是要抽一点时间来进行自我复盘和记录，最近也写一个简单的小功能，就是登陆界面的图片验证码功能\n>环境：Tomcat9、Jdk1.8\n>\n## 1 生成验证码的工具类\n\n```javascript\npublic class RandomValidateCodeUtil {\n\n\n    public static final String RANDOMCODEKEY= \"RANDOMVALIDATECODEKEY\";//放到session中的key\n    private String randString = \"0123456789\";//随机产生只有数字的字符串 private String\n    //private String randString = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";//随机产生只有字母的字符串\n    //private String randString = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";//随机产生数字与字母组合的字符串\n    private int width = 95;// 图片宽\n    private int height = 25;// 图片高\n    private int lineSize = 40;// 干扰线数量\n    private int stringNum = 4;// 随机产生字符数量\n\n    private static final Logger logger = LoggerFactory.getLogger(RandomValidateCodeUtil.class);\n\n    private Random random = new Random();\n\n    /**\n     * 获得字体\n     */\n    private Font getFont() {\n        return new Font(\"Fixedsys\", Font.CENTER_BASELINE, 18);\n    }\n\n    /**\n     * 获得颜色\n     */\n    private Color getRandColor(int fc, int bc) {\n        if (fc > 255)\n            fc = 255;\n        if (bc > 255)\n            bc = 255;\n        int r = fc + random.nextInt(bc - fc - 16);\n        int g = fc + random.nextInt(bc - fc - 14);\n        int b = fc + random.nextInt(bc - fc - 18);\n        return new Color(r, g, b);\n    }\n\n    /**\n     * 生成随机图片\n     */\n    public void getRandcode(HttpServletRequest request, HttpServletResponse response) {\n        HttpSession session = request.getSession();\n        // BufferedImage类是具有缓冲区的Image类,Image类是用于描述图像信息的类\n        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_BGR);\n        Graphics g = image.getGraphics();// 产生Image对象的Graphics对象,改对象可以在图像上进行各种绘制操作\n        g.fillRect(0, 0, width, height);//图片大小\n        g.setFont(new Font(\"Times New Roman\", Font.ROMAN_BASELINE, 18));//字体大小\n        g.setColor(getRandColor(110, 133));//字体颜色\n        // 绘制干扰线\n        for (int i = 0; i <= lineSize; i++) {\n            drowLine(g);\n        }\n        // 绘制随机字符\n        String randomString = \"\";\n        for (int i = 1; i <= stringNum; i++) {\n            randomString = drowString(g, randomString, i);\n        }\n        logger.info(randomString);\n        //将生成的随机字符串保存到session中\n        session.removeAttribute(RANDOMCODEKEY);\n        session.setAttribute(RANDOMCODEKEY, randomString);\n        g.dispose();\n        try {\n            // 将内存中的图片通过流动形式输出到客户端\n            ImageIO.write(image, \"JPEG\", response.getOutputStream());\n        } catch (Exception e) {\n            logger.error(\"将内存中的图片通过流动形式输出到客户端失败>>>>   \", e);\n        }\n\n    }\n\n    /**\n     * 绘制字符串\n     */\n    private String drowString(Graphics g, String randomString, int i) {\n        g.setFont(getFont());\n        g.setColor(new Color(random.nextInt(101), random.nextInt(111), random\n                .nextInt(121)));\n        String rand = String.valueOf(getRandomString(random.nextInt(randString\n                .length())));\n        randomString += rand;\n        g.translate(random.nextInt(3), random.nextInt(3));\n        g.drawString(rand, 13 * i, 16);\n        return randomString;\n    }\n\n    /**\n     * 绘制干扰线\n     */\n    private void drowLine(Graphics g) {\n        int x = random.nextInt(width);\n        int y = random.nextInt(height);\n        int xl = random.nextInt(13);\n        int yl = random.nextInt(15);\n        g.drawLine(x, y, x + xl, y + yl);\n    }\n\n    /**\n     * 获取随机的字符\n     */\n    public String getRandomString(int num) {\n        return String.valueOf(randString.charAt(num));\n    }\n}\n\n```\n这个类不用动，可以直接拿来用\n## 2 页面代码\n```javascript\n\n<!--html/bady代码-->\n\n<div >\n    <div >\n        <div >\n            <input  type=\"tel\" id=\"verify_input\" placeholder=\"请输入验证码\" maxlength=\"4\">\n        </div>\n    </div>\n    <div >\n        <a href=\"javascript:void(0);\" title=\"点击更换验证码\">\n            <img id=\"imgVerify\" src=\"login/getVerify\" alt=\"更换验证码\" height=\"36\" width=\"170\" onclick=\"getVerify(this);\">\n        </a>\n    </div>\n    <input type=\"button\" onclick=\"aVerify()\" value=\"提交\">\n</div>\n</body>\n\n<!--js中的代码-->\n<script type=\"text/javascript\" src=\"./js/jquery.min.js\"></script>\n<script>\n\n    //获取验证码\n    /*function getVerify(obj){\n        obj.src =  \"login/getVerify?\"+Math.random();//原生js方式\n    }*/\n\t\n\t//获取验证码\n    function getVerify() {\n        // $(\"#imgCode\").on(\"click\", function() {\n        $(\"#imgVerify\").attr(\"src\", 'login/getVerify?' + Math.random());//jquery方式\n        // });\n    }\n\n    function aVerify(){\n        var value =$(\"#verify_input\").val();\n        // alert(value);\n        $.ajax({\n            async: false,\n            type: 'post',\n            url: 'login/checkVerify',\n            dataType: \"json\",\n            data: {\n                verifyInput: value\n            },\n            success: function (result) {\n                if (result) {\n                    alert(\"success!\");\n                } else {\n                    alert(\"failed!\");\n                }\n                // window.location.reload();\n                getVerify();\n            }\n        });\n    }\n</script>\n```\n\n> 注意：这里有2种获取验证码图片的方法\n## 3 获取code和验证code的类\n```java\n@RestController\n@RequestMapping(\"/login\")\npublic class Picverifyaction {\n    private final static Logger logger = LoggerFactory.getLogger(Picverifyaction.class);\n\n    /**\n     * 生成验证码\n     */\n    @RequestMapping(value = \"/getVerify\")\n    public void getVerify(HttpServletRequest request, HttpServletResponse response) {\n        try {\n            response.setContentType(\"image/jpeg\");//设置相应类型,告诉浏览器输出的内容为图片\n            response.setHeader(\"Pragma\", \"No-cache\");//设置响应头信息，告诉浏览器不要缓存此内容\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setDateHeader(\"Expire\", 0);\n            RandomValidateCodeUtil randomValidateCode = new RandomValidateCodeUtil();\n            randomValidateCode.getRandcode(request, response);//输出验证码图片方法\n        } catch (Exception e) {\n            logger.error(\"获取验证码失败>>>>   \", e);\n        }\n    }\n\n    /**\n     * 校验验证码\n     */\n    @RequestMapping(value = \"/checkVerify\", method = RequestMethod.POST,headers = \"Accept=application/json\")\n    public boolean checkVerify(@RequestParam String verifyInput, HttpSession session) {\n        try{\n            //从session中获取随机数\n            String inputStr = verifyInput;\n            String random = (String) session.getAttribute(\"RANDOMVALIDATECODEKEY\");\n            if (random == null) {\n                return false;\n            }\n            if (random.equals(inputStr)) {\n                return true;\n            } else {\n                return false;\n            }\n        }catch (Exception e){\n            logger.error(\"验证码校验失败\", e);\n            return false;\n        }\n    }\n\n}\n```\n## 4 效果图镇楼\n![](springboot登陆页面图片验证码简单的web项目/Snipaste_2019-04-02_17-10-15.png)\n## 5 源码\n当然上面代码只是核心部分，如果有问题可去github自行下载 [charmsongo](https://github.com/charmsongo/pictureverifycode)\n>如果有什么更好的方法欢迎留言\n\n","tags":["Java","Tomcat","JS","验证"]},{"title":"JavaWeb 项目与系统时间相差 8 个小时的问题","url":"/2019/03/31/JavaWeb-项目与系统时间相差-8-个小时的问题/","content":"\n# 写在前面\n\n今天记录分享一个排查部署到 Linux 上的 web 项目执行的时间和本地系统时间相差 8 小时的问题\n>环境：redhat 6.5\n>考虑有规律的时间差可能和时区不同有关\n\n## 1 查看 Linux 系统时间和时区\n```javascript\n[root@localhost ~]# date\n2019年 03月 31日 星期日 16:00:32 CST\n[root@localhost ~]# date -R\nSun, 31 Mar 2019 16:00:44 +0800\n[root@localhost ~]# date +\"%Z %z\"\nCST +0800\n```\n从这里可以确定，系统的时间和时区正常（北京时间，也就是东八区），时区详情请看[这里](https://blog.csdn.net/ensoo/article/details/7527615)\n## 2 查看 jvm 时间和时区\n\n2.1 先在 Linux 上某个目录执行 javac ，看 javac 命令是否可用,出现如下显示就可以（中间部分已省略）\n```javascript\n[root@localhost test]# javac\n用法: javac <options> <source files>\n其中, 可能的选项包括:\n  -g                         生成所有调试信息\n  -g:none                    不生成任何调试信息\n  -g:{lines,vars,source}     只生成某些调试信息\n  ......\n  -X                         输出非标准选项的提要\n  -J<标记>                     直接将 <标记> 传递给运行时系统\n  -Werror                    出现警告时终止编译\n  @<文件名>                     从文件读取选项和文件名\n```\n\n2.2  编写测试程序\n```java\nimport java.util.TimeZone;\nimport java.util.Date;\n\npublic class time {\n    public static void main(String[] args) {\n        System.out.println(\"当前时间：\"+new Date());\n        System.out.println(\"当前默认时区：\"+TimeZone.getDefault());\n    }\n}\n```\n2.3 编译执行\n\n```java\n[root@localhost test]# javac time.java \n[root@localhost test]# ll\n总用量 8\n-rw-r--r-- 1 root root 780 3月  31 16:02 time.class\n-rw-r--r-- 1 root root 239 3月  31 16:00 time.java\n[root@localhost test]# java time\n当前时间：Sun Mar 31 08:02:34 CTM 2019\n当前默认时区：sun.util.calendar.ZoneInfo[id=\"GTM\",offset=28800000,dstSavings=0,useDaylight=false,transitions=29,lastRule=null]\n```\n这里有导其他的包，如果以上命令不好使，则使用如下命令 （中间的点 . 是当前目录的意思）\n```java\n[root@localhost test]# javac -d . time.java\n[root@localhost test]# ll\n总用量 8\n-rw-r--r-- 1 root root 780 3月  31 16:03 time.class\n-rw-r--r-- 1 root root 239 3月  31 11:00 time.java\n[root@localhost test]# java -cp . time\n当前时间：Sun Mar 31 08:02:40 CST 2019\n当前默认时区：sun.util.calendar.ZoneInfo[id=\"GTM\",offset=28800000,dstSavings=0,useDaylight=false,transitions=29,lastRule=null]\n```\n> 这里显然 jvm 的时间比系统的时间早了 8 个小时，且是格林威治的时区，所以这里修改 jvm 的时区即可，这里说下，网上查询说 jvm 的时区默认读取的是硬件时区，目录为 /etc/sysconfig/clock （[详情](http://rashost.com/blog/centos-timezone-configure)），查看如下\n\n```java\n[root@localhost test]# cat /etc/sysconfig/clock \nZONE=\"Asia/Shanghai\"\n```\n\n> 与网上对比，这里没有下面这两行\n```java\nUTC=false\nARC=false\n```\n> 这里看有人说是没有设置 UTC=false 导致的问题，查看资料说 UTC 指定 BIOS 中保存的时间是否是 GMT/UTC 时间，true 表示 BIOS 里面保存的时间是 UTC 时间，false 表示 BIOS 里面保存的时间是本地时间。\n> 加上后有的机器还是不好使，如果是在 tomcat 下运行的项目，那就重启 tomcat 即可。\n\n如果还不好使，还有修改 tomcat 配置文件的方法，欢迎参考之前的文章：[Tomcat修改日期的时区](https://blog.csdn.net/qq_29175301/article/details/81326823)\n\n>现在问题基本已解决，以上有些内容是客户现场出现的，所以现在记录时也是凭笔记和记忆回忆的，如有偏差也请不吝赐教。\n\n文章参考：https://blog.csdn.net/liqinghuiyx/article/details/53333284","tags":["Linux","Jvm","Java","时区","时间"]},{"title":"亦大亦小如你--MySQL","url":"/2019/03/09/亦大亦小如你-MySQL/","content":"\n# 写在前面\nMySQL 是个神奇的关系型数据库，真心感觉牛逼，因为做的项目比较杂，之前也碰到过 Oracle 数据库，给我的印象是 Oracle 很臃肿繁琐，配置多，如果是小项目用它的话感觉就像是杀鸡用牛刀，大材小用。但是也不是说Mysql不能用于大项目，MySQL 开元免费，是现在关系型数据库的主流产品，网上相应的文档和问题解决方案也会很多，意思就是比如菜鸟如我碰到了Mysql出的问题，网上基本上很全。\n>系统环境 Debain 7\n>Mysql  5.6\n\n\n## 1.MySQL 简单操作命令\n```javascript\n//1.登录mysql，括号中的为可选项，$（包括$）后面为实际数据，-D是指定数据库登录\nmysql (-h$host) (-P$port) -u$user -p$pwd (-D$dbname)  //地址 端口 账号 密码 数据库名\n\n//2.删除、创建数据库\ndrop database dbname; //删除数据库\ncreate database dbname charset utf8   //创建数据库\n\n//3.删除、创建数据库表\ndrop table tablename;//删除表\ncreate table tablename(id int, name varchar(80)); //创建表\n\n//4.表操作\nshow triggers\\g / show triggers; //查看触发器\nshow variables like 'character_set_database'; //查看库编码\ndesc tablename; //查看表结构\nselect current_date(); //查看表创建时间\n\n//5.导入sql文件\nuse dbname;source /dbname.sql; //执行 sql 文件\n\n//6.当前的连接情况\nselect current_user(); //查看当前登录账号\nshow processlist; //查看当前进程\nshow full processlist;//查看当前全部进程\nselect user,host,Super_priv from mysql.user; //查看所有可连接用户、地址和权限信息\n（Super_priv 用户有super权限才可以导入数据）\ngrant all privileges on *.* to root@'%' identified by 'root' with grant option;flush privileges; //给root用户远程登录的所有权限\n```\n\n## 2.自动导入sql文件\t\n### 2.1 shell操作\n```javascript\n#创建 createDb.sh，内容如下：\n\n#!/bin/bash\n#通过 shell 自动初始化数据库和表结构\nhost=$1 #地址\nport=$2 #端口\nuser=$3 #账号\npwd=$4 #密码\ndbname=$5 #数据库名\npath=$6 #sql 文件路径\n\nmysql -h$host -P$port -u$user -p$pwd <<EOF\n\ndrop database if exists $dbname;create database $dbname charset utf8;\n\nuse $dbname;\n\nsource $path\n\nCOMMIT;\nEOF\n\n#查看 shell 的执行过程命令\nsh -x ./shell //查看 shell 执行过程\n```\n### 2.2 expect操作\n```javascript\n#!/usr/bin/expect -f\n\nset timeout 10\nset host [lindex $argv 0]\nset port [lindex $argv 1]\nset user [lindex $argv 2]\nset pwd [lindex $argv 3]\nset dbname [lindex $argv 4]\nset path [lindex $argv 5]\nset cset [lindex $argv 6] #字符编码\n\nspawn mysql -h$host -P$port -u$user -p\nexpect \"Enter password: \"\nsend \"$pwd\\r\"\n\nexpect \"mysql> \"\nsend \"drop database if exists $dbname;create database $dbname charset $cset;\\r\"\n\nexpect \"mysql> \"\nsend \"use $dbname;\\r\"\n\nexpect \"mysql> \"\nsend \"source $path;\\r\"\n\nexpect \"mysql> \"\nsend \"exit\\r\"\n\ninteract\n```\n> 回头研究再更新操作，有哪里写的不对的也请不吝赐教\n","tags":["Linux","CentOS","MySQL","Shell","Expect"]},{"title":"LInux下如何挂载光盘找rpm包？","url":"/2019/03/03/LInux下如何挂载光盘找rpm包？/","content":"\n# 写在前面\nLinux 使用有时需要安装软件，当然可以通过 yum 命令来在线安装，也可以通过下载好的 rpm 包来进行安装，但是 rpm 安装需要自己来找安装软件所依赖的 rpm 包。今天就来尝试操作下\n>系统环境 CentOS 7.5\n>[root@localhost /]# cat /etc/redhat-release \nCentOS Linux release 7.5.1804 (Core)\n\n## 1.找到光盘的全路径\n```javascript\n[root@localhost /]# ls -l /dev | grep cdrom\nlrwxrwxrwx 1 root root           3 3月   3 09:32 cdrom -> sr0\ncrw-rw---- 1 root cdrom    21,   1 3月   3 09:32 sg1\nbrw-rw---- 1 root cdrom    11,   0 3月   3 09:32 sr0\n```\n这个命令知道了光盘的名字叫：cdrom，那光盘的路径就是 /dev/cdrom\n## 2.挂载光盘\n```javascript\n[root@localhost /]# mount /dev/cdrom /mnt\nmount: /dev/sr0 写保护，将以只读方式挂载\n```\n\n> 这个命令是把目录 /dev/cdrom 的内容加载到了目录 /mnt 下，也就是说目录 /mnt 下可以访问目录 /dev/cdrom 中的内容了，出现如下内容就挂载成功了\n\n```javascript\n[root@localhost /]# cd /mnt/\n[root@localhost mnt]# ls\nCentOS_BuildTag  EULA images LiveOS  repodata  RPM-GPG-KEY-CentOS-Testing-77EFI GPL   isolinux  Packages  RPM-GPG-KEY-CentOS-7  TRANS.TBL\n```\n\n## 3.拷贝目标rpm包\n\n> 进入刚才的目录 Packages ，然后找到目标rpm包，这里以「telnet 客户端」为例\n\n```java\n[root@localhost mnt]# cd Packages/\n[root@localhost Packages]# ls -l | grep telnet\n-rw-rw-r-- 2 root root    65632 8月  11 2017 telnet-0.17-64.el7.x86_64.rpm\n-rw-rw-r-- 2 root root    41804 8月  11 2017 telnet-server-0.17-64.el7.x86_64.rpm\n```\n\n这里出来 2 个，但是看名称可以明白第一个是客户端，另一个是服务端，这里选择第一个即可，然后复制到 /root 下，出现如下结果即成功\n```java\n[root@localhost Packages]# cp telnet-0.17-64.el7.x86_64.rpm /root/\n[root@localhost Packages]# ls -l /root\n总用量 72\n-rw-------. 1 root root  1569 6月   3 2018 anaconda-ks.cfg\n-rw-r--r--  1 root root 65632 3月   3 10:08 telnet-0.17-64.el7.x86_64.rpm\n-rw-r--r--. 1 root root     0 6月  30 2018 ????.txt\n```\n## 4.卸载光盘\n知道目标rpm包后，要记得卸载光盘哦！（**先切出目录 /mnt**）\n```java\n[root@localhost Packages]# cd /\n[root@localhost /]# umount /mnt/\n[root@localhost /]# ls -l /mnt/\n总用量 0\n```\n## 5.安装拷贝的rpm包\n```java\n[root@localhost /]# cd root/\n[root@localhost ~]# rpm -ivh telnet-0.17-64.el7.x86_64.rpm \n准备中...                          ################################# [100%]\n        软件包 telnet-1:0.17-64.el7.x86_64 已经安装\n[root@localhost ~]# telnet\ntelnet> \n```\n\n> 出现如上内容说明 telnet 客户端已经安装成功，是不是很简单？\n","tags":["Linux","rpm","挂载光盘","CentOS"]},{"title":"谈一谈你有多少决定是父母决定的","url":"/2019/02/07/谈一谈你有多少决定是父母决定的/","content":"![谈一谈你有多少决定是父母决定的](谈一谈你有多少决定是父母决定的/长大.jpg)\n\n你从小到大有多少决定是为自己做的，有多少是为他人决定的或者说是被他人决定的？\n\n从小被教育是要听妈妈的话，这种思想还被周董载入了音乐，你别说，听着还真好听。是 的，小孩子天生调皮，闹腾，听话的直接结果就是父母会轻松很多，而且农村长大的孩子都明白，父母为了生计会经常忙于奔波，基本没时间照顾上学后的孩子，听话这个方式看起来会让父母少很多教育的成本，但是，事实真的是这样吗？\n\n大家知道有一些病症是有潜伏期的，当然听妈妈话的这种教育方式也是有反噬的潜伏期的，它会剥夺孩子的疑问和思考事情的过程，还有 自我改变的动力，孩子长大后就会缺失基本抉择的能力。会对父母产生依赖，18岁本是成年的分界年龄，之后的事情自己完全有权利自己做决定，但是见过不少，处对象和结婚都要经过父母的决定和选择，工作不顺利，问问父母要不要离职再找，当然父母一般的回答是有工作干着就不错了。衣服也要父母来买或者是好看不好看父母说了算......\n\n我们曾经是个孩子，但终究是要长大的，父母不能陪我们一辈子，父母也终会变老，变成老小孩，也需要依靠我们来抉择，有些事情就是要自己去做决定的。第一批 90 后都已经 30 岁了，作为奔三的人了，不得不逼着自己长大，家庭主梁的接力棒我们要尝试着接过来了，该为父母承担家庭的压力了。\n\n现在感觉父母处理的一些事情不是特别好，请不要埋怨她们，她们没有错，只是父母在变老，她们替我们做了本该我们来抉择的抉择。\n\n![谈一谈你有多少决定是父母决定的](谈一谈你有多少决定是父母决定的/微信二维码.png)","tags":["成长","思想","人生"]},{"title":"迟到但重要的事","url":"/2019/01/31/迟到但重要的事/","content":"\n![迟到但重要的事](迟到但重要的事/001.jpg)\n> 好久没更文了，一来年底了公司有些项目结尾非常忙，当然这也是接口，二来自己最近不知道该写点什么，本来 2018 年阳历 12 月有份总结一直没来的及发，就趁这个机会记录下。\n\n30 号半夜醒来后，睡意全无，心里有事，就会休息不好，事实确实如此，想想这个毛病也是高考后遗症吧，思考太多，做的太少，自己知道这个道理，有时候身边就是少个可以提点自己的人，这个人最好是前辈，不然感觉我自己接受的层度不够，还要就是自己的执行力了，想做就去做。\n\n陈谷子烂芝麻扯皮完啦，说下困扰自己的事情，活这么大，总是有些事想不开，但是解不开又故步自封，不能没有一点进展，迷茫困扰着自己，25 岁了，我把人生以 10 年划分一个阶段，我预计先划分 4 个阶段，也就是到 65，我希望自己可以选一个可以持久坚持下去的一个方向，自己可以成长，自己可以获利，也可以沉淀。我想写作是这个方向，也有好多人确实鉴定了这点，但以我一个理科男的角度来说，很难，没有什么文采，感觉很伤，但是为何不先尝试呢，趁着年轻，多尝试犯错，第一个十年就是这样的机会，如果 35 ，岁之前还是没有什么成效或者好的方向的话，那么也就只能认命了，自己辛苦点，培养下一代出息吧。\n\n**我也初步拟定了几个方向：**\n\n 1. 「身体」身体是革命，人生会经历很多，无外乎健康。财富，女人和事业，如果给他们估个价，那身体拍最前是 1，其余的都是 0，如果 1 没了要那么多 0 等于没有，所以培养健康的生活方式，每天必须抽 30分钟到1小时锻炼，不是工作或重要事情，每天10点休息，早上6点起床，本身就有些薄弱，就需要重视起来。\n 2. 「自我塑造」包括形象和学识，也就是表面的和内在的，这可以双修，活的不要邋遢，勤快的，抽时间多看书，也许有些道理就突然就明白了，也会有输出的底蕴。\n 3. 「投资系统」这个是个重点，也可以说第二个阶段 45 岁以后可可否小有成就，看这个做的好不好了，学习上必须的，这个也看大环境，不过环境不好还可以盈利才是真本事。慢慢养鹅。\n 4. 「人脉关系」不管之前怎么样，从现在开始就要培养和细化朋友的圈子了，这就像投资系统一样，时间越长，它越像财富。\n 5. 「工作」虽然放后面也不是说不重要，而是初期经济来源都是这里，提高自己的核心竞争力，专业技能，初期也给自己一份保障。\n 6. 「产品思想」每个人都是产品经理，自己就是自己的产品，为别人打工和创业都一样，就是想让自己卖个好价钱，所以好好对自己，提高自己的影响力\n\n最后离过年没几天了，公司同事也都陆续回家了，也祝大家新年越来越牛逼。\n> *个人公号：charmsongo*\n\n\n\n\n","tags":["生活","感悟","随笔","目标","总结"]},{"title":"有些事并不是看到的那样","url":"/2019/01/05/有些事并不是看到的那样/","content":"![在这里插入图片描述](有些事并不是看到的那样/温暖.jpg)\n> 今天看到一句不错的话：不要因为干枯的落叶🍂而放弃整棵大树。\n\n- 有时候人眼看到的不一定是真是的，更别说带着偏见看到的，相亲时都强调说第一印象，对某事或某人有偏见这种现象大多都是第一印象惹得祸。a同学去了 H 公司上班，刚开始新鲜感充满了他的大脑，感觉公司还不错，后来慢慢的跟 b 同学聊天调侃自己在公司工作的过程中，发现自己公司真的有点 low，随后一到公司就会想到公司的不好，进而看公司领导和同事也会拿去和别的公司的领导同事做比较，感觉没有别人家的领导和同事好，情绪就会蔓延，殊不知，这都是因为开始对公司的偏见而衍生出对公司人的偏见。\n\n- 人都有缺点和优点，也许你只是拿公司的缺点去对比别人家公司的优点，结果肯定不如意，每个公司存在，肯定有存在的道理。它自身的竞争力，也算是优点，只有从内心开放开来，去深入感受，才会理清，也许 c 同事对自己的事非常热心，d 同事非常有耐心，给我讲东西从来不着急...\n\n- 每个结论都要弄清楚后再决定","tags":["生活","感悟","随笔"]},{"title":"胡乱随笔","url":"/2018/12/22/胡乱随笔/","content":"![在这里插入图片描述](胡乱随笔/往后余生.jpg)\n\n- 1.这个世界，该来的总会来，该走的也不会长留，现如今的同学还在你身边吗？小到小学，大到大学毕业，有的早已结婚生子，孩子都快打酱油了，也有大学同学在同一个城市拼搏，但是见面的机会却很少，这或许也是一种最熟悉的陌生人。\n\n- 2.现在是你满意的生活吗？你有多久没有发自内心开心的笑了，你又有多久没有为自己真正做过选择了。\n\n- 3.你还是那个听歌可以听一天，看书可以看一天，不着急不焦虑，就是这样等时间慢下去，即使看到彤红的晚霞也可以去欣喜大自然的神奇而忘记一天的时间已经消逝。\n\n- 4.麻木，呆滞，嫉妒，孤独……好像类似这些消极悲观的字眼都看上你了一样，总是想环绕你左右，即使你突破了它们的包围圈，它们也可以很快恢复原状。\n\n- 5.每次情绪不好的时候总想去感叹，调侃，但是却不知该向谁说起，也不知道该如何说出口，看修仙的小说，主人公一般会直接或间接的在困难的时候受到高人指点，但现实生活中遇到这样的贵人是可遇不可求的。\n\n- 6.想做一件事的时候，如果想的太多，衍生的束缚就会越多，越来越畏首畏尾，倒不如管他三七二十一，干就完了。\n\n- 7.年轻的时间就这么点，要学会珍惜，即使浪费，也要浪费在自己想做而没做的事情上，干的多了再去考虑如何才会有意义，干就完了。\n\n","tags":["life","态度"]},{"title":"推荐一个java操作ftp的工具类","url":"/2018/12/08/推荐一个java操作ftp的工具类/","content":"\n# 写在前面\n作为经常使用电脑整理文件的童鞋，应该都使用过从ftp服务器上传下载文件，那么今天就了解下如何通过java程序操作ftp服务的文件\n>首先你要知道ftp的ip，路径，端口，有操作权限的账号和密码\n\n## 1 导入jar包\n\n```javascript\n commons-net-3.6.jar\n```\n这个jar包用来设置编码，经过测试，不加也可用\n## 2 工具类中主要方法\n### 2.1 登陆ftp\n```javascript\n\t/**\n\t * 验证登录\n\t * @param ip\n\t * @param port\n\t * @param name\n\t * @param pwd\n\t * @return\n\t */\n\tpublic boolean login(String ip,int port, String name, String pwd) {\n\t\ttry {\n\t\t\tftp = new FTPClient();\n\t\t\tftp.connect(ip, port);\n\t\t\tSystem.out.println(ftp.login(name, pwd));\n\t\t\tif(!ftp.login(name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tftp.setCharset(Charset.forName(\"UTF-8\"));\n\t\t\tftp.setControlEncoding(\"UTF-8\");\n\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n```\n\n> 注意：获取远程文件目录，上传和下载方法基于登陆方法\n### 2.2 获取远程文件目录\n```java\n\t/**\n\t * 获取ftp某一文件（路径）下的文件名字,用于查看文件列表\n\t * @param ip\n\t * @param port\n\t * @param name\n\t * @param pwd\n\t * @param remotedir 远程地址目录\n\t * @return\n\t */\n    public boolean getFilesName(String ip,int port, String name, String pwd, String remotedir) {\n        try {\n        \tif(!login(ip, port, name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n            //获取ftp里面，指定文件夹 里面的文件名字，存入数组中\n            FTPFile[] files = ftp.listFiles(remotedir);\n            //打印出ftp里面，指定文件夹 里面的文件名字\n            for (int i = 0; i < files.length; i++) {\n                System.out.println(files[i].getName());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }finally{\n        \tthis.close();\n        }\n        return true;\n    }\n```\n### 2.3 上传文件\n```java\n\t/**\n     * 上传文件 方法一\n     * @param ip\n     * @param port\n     * @param name\n     * @param pwd\n     * @param remotepath 远程地址文件路径\n     * @param localpath 本地文件路径\n     * @return\n     */\n    public boolean putFileOne(String ip,int port, String name, String pwd,String remotepath,String localpath) {\n        try {\n        \tif(!login(ip, port, name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n            //将本地的 localpath 文件上传到ftp的根目录文件夹下面，并重命名为 remotepath中的名字\n        \t return ftp.storeFile(remotepath, new FileInputStream(new File(localpath)));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }finally{\n        \tthis.close();\n        }\n    }\n    \n    /**\n     * 上传文件的第二种方法，优化了传输速度\n     * @param ip\n     * @param port\n     * @param name\n     * @param pwd\n     * @param remotepath 远程地址文件路径\n     * @param localpath 本地文件路径\n     * @return\n     */\n    public boolean putFileTwo(String ip,int port, String name, String pwd,String remotepath,String localpath) {\n        try {\n        \tif(!login(ip, port, name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n            os = ftp.storeFileStream(remotepath);\n            fis = new FileInputStream(new File(localpath));\n            byte[] b = new byte[1024];\n            int len = 0;\n            while ((len = fis.read(b)) != -1) {\n                os.write(b,0,len);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }finally {\n        \tthis.close();\n\t\t}\n        return true;\n    }\n```\n### 2.4 下载文件\n\n```java\n\t/**\n     * 下载文件 方法一\n     * @param ip\n     * @param port\n     * @param name\n     * @param pwd\n     * @param remotepath 远程地址文件路径\n     * @param localpath 本地文件路径\n     * @return\n     */\n    public boolean getFileOne(String ip,int port, String name, String pwd,String remotepath,String localpath) {\n        try {\n        \tif(!login(ip, port, name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n            //将ftp资源中 remotepath 文件下载到本地目录文件夹下面，并重命名为 localpath 中的名字\n        \treturn ftp.retrieveFile(remotepath, new FileOutputStream(new File(localpath)));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }finally{\n        \tthis.close();\n        }\n    }\n\t\n    /**\n     * 下载文件的第二种方法，优化了传输速度\n     * @param ip\n     * @param port\n     * @param name\n     * @param pwd\n     * @param remotepath 远程地址文件路径\n     * @param localpath  本地文件路径\n     * @return\n     */\n\tpublic boolean getFileTwo(String ip,int port, String name, String pwd,String remotepath,String localpath) {\n\t\ttry {\n\t\t\tif(!login(ip, port, name, pwd)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tis = ftp.retrieveFileStream(remotepath);\n\t\t\tfos = new FileOutputStream(new File(localpath));\n\t\t\tbyte[] b = new byte[1024];\n\t\t\tint len = 0;\n\t\t\twhile ((len = is.read(b)) != -1) {\n\t\t\t\tfos.write(b,0,len);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}finally {\n\t\t\tthis.close();\n\t\t}\n\t\treturn true;\n\t}\n```\n## 3 源码\n当然上面代码只是重要的部分，如果有问题可去github自行下载 [charmsongo](https://github.com/charmsongo/ftptest)\n>如果有什么更好的方法欢迎留言","tags":["java","ftp"]},{"title":"application.properties数据库敏感信息加密这么简单？","url":"/2018/12/01/application-properties数据库敏感信息加密这么简单？/","content":"\n# 写在前面\n俗话说：”顾客是上帝“，身为程序员的我有时会直接对接客户方提出的需求，毕竟我处在提供服务的一方，所以我也会尽量的满足临时的要求。前些天就有了一个满足漏洞检测的需求，想要把数据库的明文敏感信息加密，其实也就是密码加密，所以也就有了这篇文章，我的项目是springboot结构，修改其实也挺简单，废话少说，上代码。\n\n>这里使用的是 jasypt，而它是一个java实现的安全框架\n\n## 1.Maven的pom.xml依赖\n```javascript\n <dependency>\n     <groupId>com.github.ulisesbocchio</groupId>\n     <artifactId>jasypt-spring-boot-starter</artifactId>\n     <version>1.8</version>\n </dependency>\n```\n\n## 2.通过测试类验证加密加密\n测试类如下\n```javascript\nimport org.jasypt.encryption.pbe.StandardPBEStringEncryptor;\nimport org.jasypt.encryption.pbe.config.EnvironmentPBEConfig;\n\n/**\n * Created By charmsongo 21:04 2018/11/30\n */\npublic class CryptorTest {\n\n    /**\n     * 加密方法\n     * @param plainText 需加密文本\n     */\n    public static void testEncrypt(String plainText) {\n        StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();\n        EnvironmentPBEConfig config = new EnvironmentPBEConfig();\n\n        // 加密的算法，这个算法是默认的\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        //加密的密钥，自定义\n        config.setPassword(\"CSEbfYkitulv73I2p0mXI50JMXoaxZTKJ7\");\n        standardPBEStringEncryptor.setConfig(config);\n        String encryptedText = standardPBEStringEncryptor.encrypt(plainText);\n        System.out.println(encryptedText);\n    }\n\n    /**\n     * 解密方法\n     * @param encryptedText 需解密文本\n     */\n    public static void testDecrypt(String encryptedText) {\n        StandardPBEStringEncryptor standardPBEStringEncryptor = new StandardPBEStringEncryptor();\n        EnvironmentPBEConfig config = new EnvironmentPBEConfig();\n\n        // 解密的算法，需同加密算法相同\n        config.setAlgorithm(\"PBEWithMD5AndDES\");\n        //解密的密钥，需同加密密钥相同\n        config.setPassword(\"CSEbfYkitulv73I2p0mXI50JMXoaxZTKJ7\");\n        standardPBEStringEncryptor.setConfig(config);\n        String plainText = standardPBEStringEncryptor.decrypt(encryptedText);\n        System.out.println(plainText);\n    }\n\n    public static void main(String[] args){\n        testEncrypt(\"root\");\n        testDecrypt(\"TU1NovjRHGyjp7cSc6v0sQ==\");\n    }\n}\n```\n**运行main方法结果如下**\n```javascript\nTU1NovjRHGyjp7cSc6v0sQ==\nroot\n```\n\n## 3.application.properties中配置修改\n```javascript\n##mysql-----修改前配置\nspring.datasource.url=jdbc:mysql://192.168.2.105/mysql?characterEncoding=utf8&useSSL=true\nspring.datasource.username=root\nspring.datasource.password=root\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\n##mysql-----修后前配置\njasypt.encryptor.password=CSEbfYkitulv73I2p0mXI50JMXoaxZTKJ7#引入密钥\nspring.datasource.url=jdbc:mysql://192.168.2.105/mysql?characterEncoding=utf8&useSSL=true\nspring.datasource.username=root\nspring.datasource.password=ENC(TU1NovjRHGyjp7cSc6v0sQ==)\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n> 使用 jasypt 加密数据库敏感信息的任务现在就可以交工了，但是看完您会发现，这样也不是特别安全的，确实。。。所以您有什么更好的加密方法欢迎留言","tags":["java","mysql","jasypt","application.properties","springboot"]},{"title":"记录下死磕过的一个坑","url":"/2018/11/10/记录下死磕过的一个坑/","content":"\n# 写在前面\n最近公司项目提了个很正常的需求，为什么说是很正常的需求呢，保守点说，大多数的项目都会默认有这样的功能，那就是tomcat指定404页面，具体情况请听我再啰嗦啰嗦。有这么一场景，有人想攻击一家的项目，但是攻击前需要了解该公司项目的具体组成部分才可以进行真正的攻击吧，但是我也不知道该项目都有哪些目录？目录下有哪些文件？可以用笨方法就是去试，用一个大概常用的路径去访问该项目地址，比如ip/项目名/xxx,不存在的路径会看到默认的404页面会显示tomcat的版本和其它的一些信息，敏感信息会暴露，有点危险，所以我公司不想让别人看到这些，那就需要指定一个页面，找不到的路径都要转发这个页面。\n## 1.修改web.xml\n\n修改的文件路径如下，只要放在tomcat下的都走这个配置\n```javascript\n/*/*/tomcat/conf/web.xml\n```\n在web.xml文件最后添加内容如下，error-code是浏览器状态码为404就转发404.jsp页面，这里需要注意一下，我就载在了这里，location是当前运行项目的下的路径，通俗点讲就是，一个项目名为songo，那么404.jsp页面就要放在songo项目下，对应的路径就是/songo/404.jsp,其实我也不知道为什么是这样设置，但是就是这样好使了\n```javascript\n    <error-page>\n    <error-code>404</error-code>\n    <location>/404.jsp</location>\n    </error-page>\n</web-app>\n```\n**这样的话就有个问题，如果tomcat下有多个项目，那每个项目根下都要放一个相同的404.jsp页面，如果您有什么更好的办法欢迎留言**\n## 2.404页面注意问题\n404.jsp需要添加2行内容，如下\n```javascript\n<%@ page language=\"java\" contentType=\"text/html; charset=gbk\" pageEncoding=\"gbk\" isErrorPage=\"true\"%>\n<%response.setStatus(HttpServletResponse.SC_OK);%>\n```\n**这2行主要是告诉浏览器访问服务器不存在的资源跳转的错误处理页面，但是返回正常的状态码，并且正常显示页面内容**\n另外，具体页面请到 github 自行[下载](https://github.com/charmsongo/404page)\n\n\n> 说在最后，如果有哪里有问题或写的不对的，请留言，我会尽量在第一时间给您答复\n","tags":["java","tomcat","web.xml","404"]},{"title":"ORACLE如何一次性修改用户连接数？","url":"/2018/11/08/ORACLE如何一次性修改用户连接数？/","content":"\n# oracle连接数详解\noracle连接数默认是150，当同一时间连接数大于这个数的时候就会报错，现在的解决办法为增大oracle的连接数，从150改为1500，操作如下\n## 1.修改前问题解决\n如果已经报超过连接数错误后的话，是登录不上oracle的，所以需要用命令 lsof -i:1521 查看，所有占用这个端口的进程，然后用 kill -9 PID 杀死这些进程，有可能会很多，不想一个一个杀死可以百度谷歌方法 \n\n## 2.登录oracle\n```javascript\n#切换到oracle，再登录\nsu - oracle\nsqlplus / as sysdba\n```\n## 3.查询连接数，并修改\n### 3.1使用命令 show parameter processes;\n```javascript\nSQL> show parameter processes;\nNAME                                 TYPE        VALUE\n------------------------------------ ----------- ------------------------------\naq_tm_processes                      integer     1\ndb_writer_processes                  integer     1\ngcs_server_processes                 integer     0\nglobal_txn_processes                 integer     1\njob_queue_processes                  integer     1000\nlog_archive_max_processes            integer     4\nprocesses                            integer     150\n```\n最后一行为连接数150\n### 3.2修改前需先创建 spfile 并重启 oracle 服务\n```javascript\nSQL> create spfile from pfile;\nFile created.\n\n#关闭 oracle 服务\nSQL> shutdown immediate;\nDatabase closed.\nDatabase dismounted.\nORACLE instance shut down.\n\n#启动oracle服务\nSQL> startup\nORACLE instance started.\nTotal System Global Area  835104768 bytes\nFixed Size               2257840 bytes\nVariable Size          541068368 bytes\nDatabase Buffers      289406976 bytes\nRedo Buffers      2371584 bytes\nDatabase mounted.\nDatabase opened.\n```\n### 3.3修改连接数为1500\n```javascript\nSQL> alter system set processes=1500 scope = spfile;\nSystem altered.\n\n#oracle操作要养成提交的习惯\nSQL> commit;\nCommit complete.\n\nSQL> shutdown immediate;\nDatabase closed.\nDatabase dismounted.\nORACLE instance shut down.\n\nSQL> startup\nORACLE instance started.\nTotal System Global Area  835104768 bytes\nFixed Size               2257840 bytes\nVariable Size          541068368 bytes\nDatabase Buffers      289406976 bytes\nRedo Buffers      2371584 bytes\nDatabase mounted.\nDatabase opened.\n```\n### 3.4最后验证连接数是否修改成功\n```javascript\nSQL> show parameter processes;\nNAME                                 TYPE        VALUE\n------------------------------------ ----------- ------------------------------\naq_tm_processes                      integer     1\ndb_writer_processes                  integer     1\ngcs_server_processes                 integer     0\nglobal_txn_processes                 integer     1\njob_queue_processes                  integer     1000\nlog_archive_max_processes            integer     4\nprocesses                            integer     1500\n```\n已改为1500,说明修改成功，现在可以多人痛快的连接登录oracle了\n\n> 说在最后，如果有什么问题，请留言，我会尽量在第一时间给您答复\n","tags":["linux","oracle"]},{"title":"本机自定义域名映射IP","url":"/2018/11/07/本机自定义域名映射IP/","content":"\n# wins和linux设置\n其实设置很简单，修改 hosts 文件就可以了，下面详细介绍\n## 1.wins修改hosts文件\n路径如下\n```javascript\nC:\\Windows\\System32\\drivers\\etc\\hosts\n```\n打开文件在最后添加如下内容，保存即可即时生效\n```javascript\n192.168.2.1 charmsongo.com\n```\n最可能遇到的问题就是修改后保存问题了，可以参考 [链接](https://www.jb51.net/diannaojichu/133538.html)\n\n## 2.linux修改hosts文件\n路径如下\n```javascript\n/etc/hosts\n```\n使用命令「vi /etc/hosts」,同样在最后添加如下内容,然后保存即可\n```javascript\n192.168.2.1 charmsongo.com\n```\n## 3.访问方式\n访问方式的改变就更简单了，把原来 URL 中的 IP 换成改的域名即可，这里以wins上为例，如下\n```java\n#修改前url\nhttps://192.168.2.1\n\n#修改后url\nhttps://charmsongo.com/\n```\n\n\n> 说在最后，如果有什么问题，请留言，我会尽量在第一时间给您答复\n","tags":["域名","IP"]},{"title":"java中文件如何加密压缩?","url":"/2018/10/27/java中文件如何加密压缩/","content":"\n# 文件加密压缩\n在现如今已经可以实现大部分功能的互联网需求中，安全成为了需要的非必需品，工作需求中会遇到对导出的 excel 报表 做加密压缩的问题，今天有时间总结一下，我这里简单列举功能代码，连带其它代码文末会一并给出。\n## 1.单个文件加密压缩\n单个文件加密方法，需传输 3 个参数：被压缩源文件，压缩目标文件和加密密钥，如下\n```javascript\n\t/**\n\t * @Title: encrypt_zip \n     * @Description:将指定路径下的文件压缩至指定zip文件，并以指定密码加密,若密码为空，则不进行加密保护 \n\t * @param src_file 待压缩文件路径\n\t * @param dst_file zip路径+文件名 \n\t * @param encode 加密密码  \n\t * @return \n\t */\n\tpublic static void encrypt_zip(String src_file, String dst_file, String encode) {\n\t\tFile file = new File(src_file);\n\n\t\tZipParameters parameters = new ZipParameters();\n\t\tparameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);//压缩方式\n\t\tparameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); // 压缩级别\n\n\t\tparameters.setEncryptFiles(true);\n\t\tparameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_STANDARD);//加密方式\n\t\tparameters.setPassword(encode.toCharArray());//设置密码\n\n\t\ttry {\n\t\t\tZipFile zipFile = new ZipFile(dst_file);\n\t\t\tzipFile.setFileNameCharset(\"gbk\");\n\t\t\tzipFile.addFile(file, parameters);\n\n\t\t} catch (ZipException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n```\n## 2.多文件加密压缩\n\t\n多文件加密压缩和单文件类似，但是，这个方法包含上面的方法，甚至功能上可以替换上面方法，具体看下 code\n\n\n```javascript\n\t/**\n\t * @Title: zipFilesAndEncrypt \n     * @Description: 将指定路径下的文件压缩至指定zip文件，并以指定密码加密,若密码为空，则不进行加密保护 \n\t * @param srcFileName 待压缩文件路径 或 文件夹路径\n\t * @param zipFileName zip路径+文件名 \n\t * @param password 加密密码  \n\t * @return \n\t */\n    public static void zipFilesAndEncrypt(String srcFileName,String zipFileName,String password){  \n    \t\n\t    if(StrTool.is_empty(srcFileName) || StrTool.is_empty(zipFileName)){  \n\t    \tSystem.out.println(\"请求的压缩路径或者文件名有误\");\n\t    \treturn;\n\t    }  \n\t    try {  \n\t\t    ZipParameters parameters = new ZipParameters();  \n\t\t    parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);//压缩方式\n\t\t    parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL);//压缩级别\n\t\t    if(!StrTool.is_empty(password)){  \n\t\t    \tparameters.setEncryptFiles(true);     \n\t\t\t    parameters.setEncryptionMethod(Zip4jConstants.ENC_METHOD_STANDARD);//加密方式\n\t\t\t    parameters.setPassword(password);  \n\t\t    }  \n\t\t    \n\t\t    ArrayList<File> filesToAdd=getFiles(srcFileName);\n\t\t    \n\t\t    ZipFile zipFile = new ZipFile(zipFileName); \n\t\t    zipFile.setFileNameCharset(\"gbk\");\n\t\t    zipFile.addFiles(filesToAdd, parameters); \n\t    } catch (ZipException e) {  \n\t    \tSystem.out.println(\"文件压缩出错\");\n\t    \te.printStackTrace();\n\t    } \n\t}\n    \n    //通过路径获取压缩文件集合\n    private static ArrayList<File> getFiles(String srcFileName){\n    \tArrayList<File> filesToAdd = new ArrayList<File>();\n\t    File file=new File(srcFileName);\n\t    File[] files = new File[0]; \n\t    if(file.isDirectory()){\n\t    \tfiles = file.listFiles();\n\t    \tfor(int i=0;i<files.length;i++){\n\t    \t\tif(files[i].getName().endsWith(\".xls\")){//xls结尾的excel添加压缩集合\n\t    \t\t\tfilesToAdd.add(new File(files[i].getPath()));\n\t\t\t    \tSystem.out.println(\"文件：\"+files[i].getPath());\n\t    \t\t}\n\t    \t}\n\t    } else {\n\t\t\tfilesToAdd.add(new File(file.getPath()));\n\t\t}\n\t    \n\t    return filesToAdd;\n    }\n```\n\n\n具体代码请关注个人公众号【charmsongo】回复[zip]\n\n> 说在最后，如果有什么问题，请留言，我会尽量在第一时间给您答复\n","tags":["java","加密","压缩"]},{"title":"JDK版本不同引发的https请求证书问题","url":"/2018/10/27/JDK版本不同引发的https请求证书问题/","content":"# 问题解决\n## 问题描述\n首先，服务器上跑着一个接口工程，环境是jdk8，为https请求（证书认证，但这里绕过了证书）；客户端通过https调用接口，环境是jdk7，请求时报如下错：\n```java\njavax.net.ssl.SSLHandshakeException: Received fatal alert: handshake_failure\n```\n## 问题分析\n\t\n这个问题出现的原因是因为开发时，我客户端用的jdk8测试，没有出现问题，然后客户那是jdk7，所以出现了这个问题，这是由于客户端与服务器所使用的SSL/TLS版本不一致。服务器使用的TLS版本高，而客户端支持的TLS版本低。**Java 8默认支持TLSv1.2版本**。\n\n## 解决过程\n**这里有两种解决办法**\n\n 1. 客户端升级为jdk8(让客户改不怎么现实，这种方法先pass)\n 2. 构造证书new SSLConnectionSocketFactory对象时加上两个属性\n \n\n *这里说下第二种解决方法，下面 SSLConnectionSocketFactory 上的注释* \n \n  get请求\n  \n```java\n/**\n * get请求\n * @param url\n * @param timeout 超时时间（毫秒）\n * @param user\n * @param code\n * @return\n */\npublic static String doGet(String url, int timeout, String user, String code) {\n\ttry {\n\t\tCloseableHttpClient client = null;\n\n\t\t/* 相信自己的CA和所有自签名的证书 */\n\t\tSSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n\n\t\t/* 不做证书校验 */\n\t\tsslcontext.init(null, new TrustManager[] { truseAllManager }, null);\n\n\t\t/* 添加两个属性 new String[]{\"TLSv1.2\"} 和 null */\n\t\tSSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext,new String[]{\"TLSv1.2\"}, null, new HostnameVerifier() {\n\t\t\t@Override\n\t\t\tpublic boolean verify(String hostname, SSLSession session) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\t\n\t\tclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();\n\n\t\t//发送get请求\n\t\tHttpGet request = new HttpGet(url);\n\t\trequest.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\t\trequest.setHeader(\"User\", user);\n\t\trequest.setHeader(\"Code\", code);\n\t\tRequestConfig requestConfig = RequestConfig.custom()\n\t\t\t\t.setConnectTimeout(timeout)\n\t\t\t\t.setSocketTimeout(timeout).build();\n\t\trequest.setConfig(requestConfig);\n\t\tHttpResponse response = client.execute(request);\n\n\t\t/**读取服务器返回过来的json字符串数据**/\n\t\tString strResult = EntityUtils.toString(response.getEntity());\n\t\treturn strResult;\n\t}catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn null;\n}\n```\npost请求\n```java\n/**\n * post请求（用于请求json格式的参数）\n * @param url 请求路径\n * @param params 请求参数\n * @param user 用户\n * @param code 秘钥\n * @return\n * @throws Exception\n */\npublic static String doPost(String url, String params, String user, String code) throws Exception {\n\n\tCloseableHttpClient httpclient = null;\n\n\t/* 相信自己的CA和所有自签名的证书 */\n\tSSLContext sslcontext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n\n\t/* 不做证书校验 */\n\tsslcontext.init(null, new TrustManager[] { truseAllManager }, null);\n\t\n\t/* 添加两个属性 new String[]{\"TLSv1.2\"} 和 null */\n\tSSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslcontext,new String[]{\"TLSv1.2\"}, null, new HostnameVerifier() {\n\t\t@Override\n\t\tpublic boolean verify(String hostname, SSLSession session) {\n\t\t\treturn true;\n\t\t}\n\t});\n\n\thttpclient = HttpClients.custom().setSSLSocketFactory(sslsf).build();\n\tHttpPost httpPost = new HttpPost(url);// 创建httpPost\n\thttpPost.setHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\thttpPost.setHeader(\"User\", user);\n\thttpPost.setHeader(\"Code\", code);\n\tString charSet = \"UTF-8\";\n\tStringEntity entity = new StringEntity(params, charSet);\n\thttpPost.setEntity(entity);\n\tCloseableHttpResponse response = null;\n\ttry {\n\n\t\tresponse = httpclient.execute(httpPost);\n\t\t\tHttpEntity responseEntity = response.getEntity();\n\t\t\tString jsonString = EntityUtils.toString(responseEntity);\n\t\t\treturn jsonString;\n\t}\n\tfinally {\n\t\tif (response != null) {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}\n```\n\n具体代码请到 github 自行[下载](https://github.com/charmsongo/ifctest)\n\n如果这里不能解决您的问题请参考如下链接\n\n[链接1](https://blog.csdn.net/taiyangdao/article/details/54707184)[链接2](https://blog.csdn.net/fsafs168/article/details/82020959)","tags":["JDK","https","证书"]},{"title":"Linux上用Jenkins执行shell","url":"/2018/10/20/Linux上用Jenkins执行shell/","content":"\n> 执行环境： Centos 7，jdk8\n\n# 安装Jenkins\n\nJenkins是个java程序所以需要先安装jdk\n\n## Jdk安装\n\n 1. 这里先在 winsdows 上下载 jdk-8u181-linux-x64.gz [连接](https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html)；\n![这里需要登录oracle才能下载](Linux上用Jenkins执行shell/1.png)\n 2. 然后通过winscp拖到linux上的 /usr/local 路径下；\n 3. 然后解压安装；\n```javascript\n[root@localhost /]# tar -xf jdk-8u121-linux-x64.tar.gz\n[root@localhost /]# mv jdk1.8.0_121/ /usr/local/jdk  && rm -rf jdk-8u121-linux-x64.tar.gz\n```\n 4. 再配置环境变量；\n```javascript\nroot@localhost:~# vim /etc/profile\nJAVA_HOME=/usr/local/jdk/\nPATH=$JAVA_HOME/bin:$PATH\nCLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\nexport JAVA_HOME PATH CLASSPATH \nroot@localhost:/usr/local# source /etc/profile\n```\n\n##  安装Jenkins\n\n```javascript\n[root@localhost ~]# wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war \n```\n\n## 打开防火墙\n需要注意的是，查看防火墙是否打开，打开的话需要放开端口9000或者直接关闭防火墙\n\n - 查看防火墙状态\n```javascript\n [root@localhost local]# firewall-cmd --state\nrunning \n```\n - 关闭防火墙\n```javascript\n[root@localhost local]#  systemctl stop firewalld\n```\n - 启动防火墙\n```javascript\n[root@localhost local]#  systemctl start firewalld\n```\n - 开放端口 9000\n```javascript\n[root@localhost local]# firewall-cmd --zone=public --add-port=9000/tcp --permanent  （--permanent永久生效，没有此参数重启后失效）\nsuccess\n```\n - 更新防火墙规则\n```javascript\n[root@localhost local]# firewall-cmd --reload\nsuccess \n```\n - 查看所有开放端口\n```javascript\n[root@localhost local]#  firewall-cmd --zone=public --list-ports\n9000/tcp    \n```\n## 自定义指定端口9000启动jenkins\n```javascript\n[root@localhost ~]# java -jar jenkins.war --httpPort=9000\n```\n## 浏览器登录\n\n地址栏输入 IP:9000 ，例：192.168.2.14：9000\n![在这里插入图片描述](Linux上用Jenkins执行shell/2.png)\n\n**根据提示信息找到初始密码输入登录**\n\n![在这里插入图片描述](Linux上用Jenkins执行shell/3.png)\n\n**默认选择 安装推荐插件**\n\n##  修改管理员密码\n上一步过后会有个创建一个管理员的页面，但是我这里不好使，所以就登陆admin，然后修改admin密码\n![在这里插入图片描述](Linux上用Jenkins执行shell/4.png)\n\n**拖到最下面修改密码**\n\n![在这里插入图片描述](Linux上用Jenkins执行shell/5.png)\n\n**然后可以注销后用修改的密码登陆了**\n\n##  创建一个执行shell的任务\n![在这里插入图片描述](Linux上用Jenkins执行shell/6.png)\n![在这里插入图片描述](Linux上用Jenkins执行shell/7.png)\n\n**然后下一步拖到最下面选择构建下拉框选**\n\n![在这里插入图片描述](Linux上用Jenkins执行shell/8.png)\n![在这里插入图片描述](Linux上用Jenkins执行shell/9.png)\n\n## 构建刚创建的Jenkins任务\n![在这里插入图片描述](Linux上用Jenkins执行shell/10.png)\n\n\n## 查看执行结果\n![在这里插入图片描述](Linux上用Jenkins执行shell/11.png)\n![在这里插入图片描述](Linux上用Jenkins执行shell/12.png)\n\n**出现 Finished: SUCCESS 恭喜，即为执行成功**\n\n> 其它博客：\n> CSDN:https://blog.csdn.net/qq_29175301/article/details/83213252\n> OSChina:https://my.oschina.net/charmsongo/blog/2249904","tags":["linux","jenkins","shell"]},{"title":"对待金钱的思维","url":"/2018/10/12/对待金钱的思维/","content":"\n**穷人思维和富人思维**\n- 1.人越缺什么就会看重什么，越不缺什么就会看的越轻。\n- 2.穷人花钱买东西钱总是会先考虑自己还有多少钱，如果不够就不买了，如果买的话如何才能买到最实惠的东西，省钱思维；富人花钱买东西首先想到的是我想要什么，这个东西对我来说有什么用，是不是必须得，目标导向型。\n- 3.穷人思维考虑做一件事情的时候总是会忽略时间成本，喜欢用时间来换金钱，感觉多花些时间来少掏些金钱就是赚了。\n- 4.夫人思维花钱无外乎两件事情没意识为了赚钱，二是为了享受。\n- 5.减少无意义的频繁决策，节省宝贵的精力，用在有意义的事情上。\n- 6.开拓自己的视野，知道是一码事，做到是另一码事。"},{"title":"my blog's format has change","url":"/2018/10/07/my-blog-s-format-has-change/","content":"\n*你好啊*\n***\n我的博客的格式终于改变了，选择了一个 简约明朗 的样式，之后有时间我会同步更新\n技术博客。"},{"title":"你好,Hexo","url":"/2018/09/22/你好-Hexo/","content":"\n张博在床上躺着呢，\n哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈哈"}]